"""–¢–µ—Å—Ç—ã –¥–ª—è –¥–æ–º–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""

import pytest

from bot.domain.constants import REQUIRED_QUESTIONS
from bot.domain.models import TravelCategory, TravelRecommendation, TravelRequest


class TestTravelRequest:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ TravelRequest"""

    def test_create_travel_request(self) -> None:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ"""
        request = TravelRequest(
            user_id=123, category=TravelCategory.FAMILY, answers={}
        )

        assert request.user_id == 123
        assert request.category == TravelCategory.FAMILY
        assert request.answers == {}

    def test_add_answer(self) -> None:
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
        request = TravelRequest(
            user_id=123, category=TravelCategory.FAMILY, answers={}
        )

        request.add_answer("family_size", "2+1", "2 –≤–∑—Ä–æ—Å–ª—ã—Ö + 1 —Ä–µ–±–µ–Ω–æ–∫")

        assert "family_size" in request.answers
        answer = request.get_answer("family_size")
        assert answer is not None
        assert answer.question_key == "family_size"
        assert answer.answer_value == "2+1"
        assert answer.answer_text == "2 –≤–∑—Ä–æ—Å–ª—ã—Ö + 1 —Ä–µ–±–µ–Ω–æ–∫"

    def test_get_nonexistent_answer(self) -> None:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        request = TravelRequest(
            user_id=123, category=TravelCategory.FAMILY, answers={}
        )

        answer = request.get_answer("nonexistent")
        assert answer is None

    def test_is_complete_empty(self) -> None:
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –ø—É—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        request = TravelRequest(
            user_id=123, category=TravelCategory.FAMILY, answers={}
        )

        required_questions = REQUIRED_QUESTIONS[TravelCategory.FAMILY]
        assert not request.is_complete(required_questions)

    def test_is_complete_partial(self) -> None:
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ —á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        request = TravelRequest(
            user_id=123, category=TravelCategory.FAMILY, answers={}
        )

        request.add_answer("family_size", "2+1", "2 –≤–∑—Ä–æ—Å–ª—ã—Ö + 1 —Ä–µ–±–µ–Ω–æ–∫")

        required_questions = REQUIRED_QUESTIONS[TravelCategory.FAMILY]
        assert not request.is_complete(required_questions)

    def test_is_complete_full(self) -> None:
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        request = TravelRequest(
            user_id=123, category=TravelCategory.FAMILY, answers={}
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        request.add_answer("family_size", "2+1", "2 –≤–∑—Ä–æ—Å–ª—ã—Ö + 1 —Ä–µ–±–µ–Ω–æ–∫")
        request.add_answer("travel_time", "month", "–ë–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü")
        request.add_answer("priority", "beach", "–ú–æ—Ä–µ/–ø–ª—è–∂")

        required_questions = REQUIRED_QUESTIONS[TravelCategory.FAMILY]
        assert request.is_complete(required_questions)


class TestTravelRecommendation:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ TravelRecommendation"""

    def test_create_recommendation(self) -> None:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        recommendation = TravelRecommendation(
            destination="–ê–Ω—Ç–∞–ª—å—è, –¢—É—Ä—Ü–∏—è",
            description="–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞",
            highlights=["–ü–ª—è–∂–∏", "–ê–∫–≤–∞–ø–∞—Ä–∫–∏", "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞"],
            practical_info="–í–∏–∑–∞ –Ω–µ –Ω—É–∂–Ω–∞, –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã",
            estimated_cost="$800-1200",
            duration="7-10 –¥–Ω–µ–π",
            best_time="–ú–∞–π-–æ–∫—Ç—è–±—Ä—å",
        )

        assert recommendation.destination == "–ê–Ω—Ç–∞–ª—å—è, –¢—É—Ä—Ü–∏—è"
        assert len(recommendation.highlights) == 3
        assert recommendation.estimated_cost == "$800-1200"

    def test_format_for_telegram(self) -> None:
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Telegram"""
        recommendation = TravelRecommendation(
            destination="–ê–Ω—Ç–∞–ª—å—è, –¢—É—Ä—Ü–∏—è",
            description="–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞",
            highlights=["–ü–ª—è–∂–∏", "–ê–∫–≤–∞–ø–∞—Ä–∫–∏"],
            practical_info="–í–∏–∑–∞ –Ω–µ –Ω—É–∂–Ω–∞",
            estimated_cost="$800-1200",
        )

        formatted = recommendation.format_for_telegram()

        assert "üåç **–ê–Ω—Ç–∞–ª—å—è, –¢—É—Ä—Ü–∏—è**" in formatted
        assert "–û—Ç–ª–∏—á–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞" in formatted
        assert "‚ú® **–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**" in formatted
        assert "‚Ä¢ –ü–ª—è–∂–∏" in formatted
        assert "‚Ä¢ –ê–∫–≤–∞–ø–∞—Ä–∫–∏" in formatted
        assert "üìã **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**" in formatted
        assert "üí∞ **–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** $800-1200" in formatted

    def test_format_minimal_recommendation(self) -> None:
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        recommendation = TravelRecommendation(
            destination="–¢–µ—Å—Ç", description="–û–ø–∏—Å–∞–Ω–∏–µ", highlights=[], practical_info=""
        )

        formatted = recommendation.format_for_telegram()

        assert "üåç **–¢–µ—Å—Ç**" in formatted
        assert "–û–ø–∏—Å–∞–Ω–∏–µ" in formatted
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è
        assert "üí∞" not in formatted
        assert "‚è±" not in formatted
        assert "üìÖ" not in formatted
