"""–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""

from typing import cast
from unittest.mock import AsyncMock, MagicMock

import pytest

from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, User, Message

from bot.handlers.results import (
    _create_mock_recommendation,
    _create_mock_alternative_recommendation,
    show_travel_recommendation,
)
from bot.handlers.categories import get_progress_text, get_current_question_number


class TestResultsHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""

    def test_create_mock_recommendation_family(self) -> None:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"""
        result = _create_mock_recommendation("family", {})

        assert "–ê–Ω—Ç–∞–ª—å—è, –¢—É—Ä—Ü–∏—è" in result
        assert "—Å–µ–º–µ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞" in result
        assert "–ê–∫–≤–∞–ø–∞—Ä–∫–∏" in result
        assert "üí∞" in result
        assert "‚è±" in result

    def test_create_mock_recommendation_pets(self) -> None:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏"""
        result = _create_mock_recommendation("pets", {})

        assert "–°–æ—á–∏, –†–æ—Å—Å–∏—è" in result
        assert "Pet-friendly" in result
        assert "–ø–∏—Ç–æ–º—Ü–∞–º–∏" in result

    def test_create_mock_recommendation_photo(self) -> None:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"""
        result = _create_mock_recommendation("photo", {})

        assert "–ö–∞–ø–ø–∞–¥–æ–∫–∏—è, –¢—É—Ä—Ü–∏—è" in result
        assert "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π" in result
        assert "–≤–æ–∑–¥—É—à–Ω—ã—Ö —à–∞—Ä–∞—Ö" in result

    def test_create_mock_recommendation_budget(self) -> None:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –±—é–¥–∂–µ—Ç–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"""
        result = _create_mock_recommendation("budget", {})

        assert "–ì—Ä—É–∑–∏—è" in result
        assert "–±—é–¥–∂–µ—Ç–µ" in result
        assert "$200-400" in result

    def test_create_mock_recommendation_active(self) -> None:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞"""
        result = _create_mock_recommendation("active", {})

        assert "–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞" in result
        assert "–∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö" in result
        assert "–¢—Ä–µ–∫–∫–∏–Ω–≥" in result

    def test_create_mock_recommendation_unknown_category(self) -> None:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        result = _create_mock_recommendation("unknown", {})

        # –î–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        assert "–ê–Ω—Ç–∞–ª—å—è, –¢—É—Ä—Ü–∏—è" in result

    def test_create_mock_alternative_recommendation_family(self) -> None:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"""
        result = _create_mock_alternative_recommendation("family", {})

        assert "–ö–∏–ø—Ä (–ê–π—è-–ù–∞–ø–∞)" in result
        assert "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç" in result

    def test_create_mock_alternative_recommendation_unknown(self) -> None:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        result = _create_mock_alternative_recommendation("unknown", {})

        assert "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" in result


class TestCategoriesHandlers:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    def test_get_progress_text(self) -> None:
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        result = get_progress_text("family", 1)
        assert result == "–í–æ–ø—Ä–æ—Å 1 –∏–∑ 3"

        result = get_progress_text("photo", 2)
        assert result == "–í–æ–ø—Ä–æ—Å 2 –∏–∑ 2"

    def test_get_current_question_number(self) -> None:
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        result = get_current_question_number("family", "family_size")
        assert result == 1

        result = get_current_question_number("family", "travel_time")
        assert result == 2

        result = get_current_question_number("family", "priority")
        assert result == 3


@pytest.fixture
def callback_query_fixture() -> CallbackQuery:
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ CallbackQuery –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    user = User(id=123, is_bot=False, first_name="Test")

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    message = MagicMock()
    message.edit_text = AsyncMock()
    message.answer = AsyncMock()

    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ callback —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
    callback = MagicMock()
    callback.from_user = user
    callback.message = cast(Message, message)
    callback.data = "test:data"
    callback.answer = AsyncMock()

    return cast(CallbackQuery, callback)


@pytest.fixture
def fsm_context_fixture() -> FSMContext:
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ FSMContext –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    context = MagicMock()
    context.get_data = AsyncMock(return_value={"category": "family", "answers": {}})
    context.update_data = AsyncMock()
    context.set_state = AsyncMock()
    context.clear = AsyncMock()

    return cast(FSMContext, context)


class TestHandlersIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""

    @pytest.mark.asyncio
    async def test_show_travel_recommendation(
        self,
        callback_query_fixture: CallbackQuery,  # pylint: disable=redefined-outer-name
        fsm_context_fixture: FSMContext,  # pylint: disable=redefined-outer-name
    ) -> None:
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"""
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é - –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å —Ç–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω–∞ –Ω–µ –ø–∞–¥–∞–µ—Ç
        await show_travel_recommendation(callback_query_fixture, fsm_context_fixture)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        mock_context = cast(MagicMock, fsm_context_fixture)
        mock_context.get_data.assert_called_once()

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: edit_text –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à –º–æ–∫ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç
        # isinstance(Message). –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è unit —Ç–µ—Å—Ç–∞ - –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É,
        # –∞ –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram API

    @pytest.mark.asyncio
    async def test_show_alternative_recommendation(
        self,
        callback_query_fixture: CallbackQuery,  # pylint: disable=redefined-outer-name
        fsm_context_fixture: FSMContext,  # pylint: disable=redefined-outer-name
    ) -> None:
        """–¢–µ—Å—Ç –ø–æ–∫–∞–∑–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã —É –∫–ª–∞—Å—Å–∞ –±—ã–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—É–±–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –≤—ã–∑–æ–≤–µ
        await show_travel_recommendation(callback_query_fixture, fsm_context_fixture)
