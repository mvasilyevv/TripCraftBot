"""–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è TripCraftBot"""

import asyncio
import logging
import os
import sys

import requests
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from redis.asyncio import Redis

from bot.handlers import categories, results, start
from config import DEBUG, FSM_TTL, LOG_LEVEL, TELEGRAM_BOT_TOKEN, get_redis_url


def setup_logging() -> None:
    logging.basicConfig(
        level=getattr(logging, LOG_LEVEL),
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler(sys.stdout)],
    )
    logging.getLogger("aiogram").setLevel(logging.WARNING)
    logging.getLogger("aiohttp").setLevel(logging.WARNING)
    logging.getLogger("redis").setLevel(logging.WARNING)


async def create_bot() -> Bot:
    """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞."""
    return Bot(token=TELEGRAM_BOT_TOKEN)


async def create_dispatcher() -> Dispatcher:
    redis = Redis.from_url(get_redis_url(), encoding="utf-8", decode_responses=True)
    storage = RedisStorage(redis=redis, state_ttl=FSM_TTL)
    return Dispatcher(storage=storage)


async def register_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
    dp.include_router(start.router)
    dp.include_router(categories.router)
    dp.include_router(results.router)


def get_webhook_url() -> str | None:
    """–ü–æ–ª—É—á–∞–µ—Ç webhook URL –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ ngrok API"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
    try:
        with open("/tmp/webhook_url", encoding="utf-8") as f:
            url = f.read().strip()
            if url:
                return url
    except FileNotFoundError:
        pass

    # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ ngrok API
    try:
        response = requests.get("http://tripcraft-ngrok:4040/api/tunnels", timeout=5)
        if response.status_code == 200:
            data = response.json()
            tunnels = data.get("tunnels", [])
            for tunnel in tunnels:
                if tunnel.get("proto") == "https":
                    public_url = tunnel.get("public_url")
                    if public_url:
                        return f"{public_url}/webhook"
    except Exception as e:
        logging.getLogger(__name__).warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑ ngrok API: %s", e)

    return None


async def setup_webhook(bot: Bot) -> str | None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞"""
    logger = logging.getLogger(__name__)

    # –ñ–¥–µ–º ngrok –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ngrok –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")
    webhook_url = None

    for attempt in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã = 1 –º–∏–Ω—É—Ç–∞
        webhook_url = get_webhook_url()
        if webhook_url:
            break

        logger.info("‚è≥ –ü–æ–ø—ã—Ç–∫–∞ %d/30: –æ–∂–∏–¥–∞–Ω–∏–µ ngrok URL...", attempt + 1)
        await asyncio.sleep(2)

    if not webhook_url:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å webhook URL")
        return None

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        await bot.set_webhook(webhook_url)
        logger.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s", webhook_url)
        return webhook_url
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: %s", e)
        return None


async def on_startup(bot: Bot) -> None:
    logger = logging.getLogger(__name__)
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot_info = await bot.get_me()
    logger.info("‚úÖ –ë–æ—Ç @%s —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", bot_info.username)

    if os.getenv("USE_WEBHOOK", "false").lower() == "true":
        webhook_url = await setup_webhook(bot)
        if not webhook_url:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
            sys.exit(1)

    if DEBUG:
        logger.info("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∞–∫—Ç–∏–≤–µ–Ω")


async def on_shutdown(bot: Bot) -> None:
    logger = logging.getLogger(__name__)
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    await bot.session.close()
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


async def main() -> None:
    setup_logging()
    logger = logging.getLogger(__name__)

    try:
        bot = await create_bot()
        dp = await create_dispatcher()
        await register_handlers(dp)
        dp.startup.register(on_startup)
        dp.shutdown.register(on_shutdown)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        use_webhook = os.getenv("USE_WEBHOOK", "false").lower() == "true"

        if use_webhook:
            logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook...")

            # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            app = web.Application()

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook handler
            webhook_requests_handler = SimpleRequestHandler(
                dispatcher=dp,
                bot=bot,
            )
            webhook_requests_handler.register(app, path="/webhook")

            # –î–æ–±–∞–≤–ª—è–µ–º health check endpoint
            async def health_check(_request: web.Request) -> web.Response:
                return web.json_response({"status": "ok", "bot": "TripCraftBot"})

            app.router.add_get("/health", health_check)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            setup_application(app, dp, bot=bot)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
            host = os.getenv("WEBSERVER_HOST", "0.0.0.0")
            port = int(os.getenv("WEBSERVER_PORT", "8000"))

            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ %s:%d", host, port)

            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, host, port)
            await site.start()

            logger.info("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
            finally:
                await runner.cleanup()
        else:
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
            await dp.start_polling(bot, allowed_updates=["message", "callback_query"])

    except Exception as e:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", e)
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.getLogger(__name__).info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logging.getLogger(__name__).error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: %s", e)
        sys.exit(1)
