import os

import ollama
import subprocess
import re
import ast
import sys
from pathlib import Path

from together import Together

README_SECTION_HEADER = "## AI-INSTRUCTIONS"
README_PATH = "README.md"
TEST_COMMAND = ["pytest", "--tb=short", "--maxfail=3"]

client = Together(api_key=os.getenv("TOGETHER_AI_TOKEN"))

def extract_clean_dict(llm_output):
    try:
        last_open = llm_output.rfind('{')
        last_close = llm_output.rfind('}')

        if last_open == -1 or last_close == -1 or last_close < last_open:
            raise ValueError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –≤ –æ—Ç–≤–µ—Ç–µ.")

        dict_text = llm_output[last_open:last_close + 1]

        parsed_dict = ast.literal_eval(dict_text)

        if not isinstance(parsed_dict, dict):
            raise ValueError("‚ö†Ô∏è –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –±–ª–æ–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—ë–º.")

        return parsed_dict

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
        print(f"üîé –ò—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM:\n{llm_output}")
        sys.exit(1)


def get_readme_section():
    if not Path(README_PATH).exists():
        print("‚ùå README.md –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        sys.exit(1)

    with open(README_PATH, encoding="utf-8") as f:
        content = f.read()

    match = re.search(rf"{README_SECTION_HEADER}\n(.*?)(\n## |\Z)", content, re.DOTALL)
    if not match:
        print("‚ùå –°–µ–∫—Ü–∏—è AI-INSTRUCTIONS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ README.md")
        sys.exit(1)

    return match.group(1).strip()


def ask_llm(prompt: str) -> str:
    completion = client.chat.completions.create(
        model="meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
        messages=[{"role": "user", "content": prompt}],
    )
    return completion.choices[0].message.content


def run_command(command, description):
    print(f"üîß {description}...")
    try:
        result = subprocess.run(
            command, check=True, text=True,
            capture_output=True
        )
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è: {description}")
        print(e.stdout)
        comment = ask_llm(f"–í–æ—Ç –æ—à–∏–±–∫–∞:\n{e.stdout}\n\n–ü–æ—è—Å–Ω–∏, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –∏ –∫–∞–∫ –µ—ë —É—Å—Ç—Ä–∞–Ω–∏—Ç—å.")
        print(f"üí° –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç AI:\n{comment}")
        return False, e


def main():
    print("ü§ñ AI –ê–≥–µ–Ω—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    instructions = get_readme_section()
    print("üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ README.md:")
    print(instructions)

    llm_test_cmd = ask_llm(f"""
        –í–æ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ README.md:
    
        {instructions}
    
        
        –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π Python-—Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ:
        - –∫–ª—é—á: bash-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è,
        - –∑–Ω–∞—á–µ–Ω–∏–µ: –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.
        
        –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å **—Ç–æ–ª—å–∫–æ** –≤ –≤–∏–¥–µ Python-–∫–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ —Ç—Ä–æ–π–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫. –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π, "<think>" –∏ –ø—Ä–æ—á–µ–≥–æ.
    """)

    try:
        commands_dict = extract_clean_dict(llm_test_cmd)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM: {e}")
        print(f"–û—Ç–≤–µ—Ç –±—ã–ª:\n{llm_test_cmd}")
        sys.exit(1)

    for cmd, desc in commands_dict.items():
        print(f"üì¶ –ö–æ–º–∞–Ω–¥–∞: {cmd}\nüîç –û–ø–∏—Å–∞–Ω–∏–µ: {desc}")
        success, _ = run_command(cmd.split(), desc)
        if not success:
            print("üõë –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π. –ü—Ä–µ–∫—Ä–∞—â–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.")
            return

    print("üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ.")


if __name__ == "__main__":
    main()