"""–î–æ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è TripCraftBot"""

from dataclasses import dataclass
from enum import Enum
from typing import Dict, Optional


class TravelCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"""

    FAMILY = "family"
    PETS = "pets"
    PHOTO = "photo"
    BUDGET = "budget"
    ACTIVE = "active"


@dataclass
class UserAnswer:
    """–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å"""

    question_key: str
    answer_value: str
    answer_text: str


@dataclass
class TravelRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"""

    user_id: int
    category: TravelCategory
    answers: Dict[str, UserAnswer]
    created_at: Optional[str] = None

    def add_answer(self, question_key: str, answer_value: str, answer_text: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.answers[question_key] = UserAnswer(question_key, answer_value, answer_text)

    def get_answer(self, question_key: str) -> Optional[UserAnswer]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á—É"""
        return self.answers.get(question_key)

    def is_complete(self, required_questions: list[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã"""
        return all(question in self.answers for question in required_questions)


@dataclass
class TravelRecommendation:
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"""

    destination: str
    description: str
    highlights: list[str]
    practical_info: str
    estimated_cost: Optional[str] = None
    duration: Optional[str] = None
    best_time: Optional[str] = None

    def format_for_telegram(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        text = f"üåç **{self.destination}**\n\n"
        text += f"{self.description}\n\n"

        if self.highlights:
            text += "‚ú® **–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**\n"
            for highlight in self.highlights:
                text += f"‚Ä¢ {highlight}\n"
            text += "\n"

        if self.practical_info:
            text += f"üìã **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n{self.practical_info}\n\n"

        if self.estimated_cost:
            text += f"üí∞ **–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {self.estimated_cost}\n"

        if self.duration:
            text += f"‚è± **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {self.duration}\n"

        if self.best_time:
            text += f"üìÖ **–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–µ–∑–¥–∫–∏:** {self.best_time}\n"

        return text


class TravelPlannerError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"""

    pass


class InvalidTravelRequestError(TravelPlannerError):
    """–û—à–∏–±–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""

    pass


class ExternalServiceError(TravelPlannerError):
    """–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""

    pass


class ConfigurationError(TravelPlannerError):
    """–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    pass
