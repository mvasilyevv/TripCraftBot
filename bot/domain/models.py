"""–î–æ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è TripCraftBot"""

import logging
import re
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)


class TravelCategory(Enum):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"""

    FAMILY = "family"
    PETS = "pets"
    PHOTO = "photo"
    BUDGET = "budget"
    ACTIVE = "active"


@dataclass
class UserAnswer:
    """–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å"""

    question_key: str
    answer_value: str
    answer_text: str


@dataclass
class TravelRequest:
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"""

    user_id: int
    category: TravelCategory
    answers: dict[str, UserAnswer]
    created_at: str | None = None

    def add_answer(self, question_key: str, answer_value: str, answer_text: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
        if question_key in self.answers:
            old_value = self.answers[question_key].answer_value
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å %s: '%s' ‚Üí '%s'",
                       self.user_id, question_key, old_value, answer_value)
        else:
            logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å %s: '%s'",
                       self.user_id, question_key, answer_value)

        self.answers[question_key] = UserAnswer(question_key, answer_value, answer_text)

    def get_answer(self, question_key: str) -> UserAnswer | None:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á—É"""
        return self.answers.get(question_key)

    def is_complete(self, required_questions: list[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Å–µ –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã"""
        return all(question in self.answers for question in required_questions)


@dataclass
class TravelRecommendation:
    """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"""

    destination: str
    description: str
    highlights: list[str]
    practical_info: str
    estimated_cost: str | None = None
    duration: str | None = None
    best_time: str | None = None

    def format_for_telegram(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram"""
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–∫
        clean_destination = self._clean_destination(self.destination)

        text = f"üåç **{clean_destination}**\n\n"

        # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        clean_description = self._clean_description(self.description)
        if clean_description:
            text += f"{clean_description}\n\n"

        if self.highlights:
            text += "‚ú® **–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**\n"
            for highlight in self.highlights:
                clean_highlight = self._clean_text(highlight)
                if clean_highlight:
                    text += f"‚Ä¢ {clean_highlight}\n"
            text += "\n"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ
        if self.practical_info:
            clean_practical = self._clean_practical_info(self.practical_info)
            if clean_practical:
                text += f"üìã **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n{clean_practical}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        additional_info = []
        if self.estimated_cost:
            additional_info.append(f"üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {self.estimated_cost}")
        if self.duration:
            additional_info.append(f"‚è± **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {self.duration}")
        if self.best_time:
            additional_info.append(f"üìÖ **–õ—É—á—à–µ–µ –≤—Ä–µ–º—è:** {self.best_time}")

        if additional_info:
            text += "\n".join(additional_info)

        return text

    def _clean_destination(self, destination: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
        # –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏
        pattern = r'####?\s*(Destination|Description|destination|description)\s*'
        clean = re.sub(pattern, '', destination)
        # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏
        clean = re.sub(r'^(.+?):\s*\1', r'\1', clean)
        # –£–±–∏—Ä–∞–µ–º markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        clean = re.sub(r'[#*_`]', '', clean)
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        clean = re.sub(r'\s+', ' ', clean).strip()

        return clean or "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"

    def _clean_description(self, description: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        lines = description.split('\n')
        clean_lines = []

        skip_patterns = [
            r'####?\s*(Destination|Description|Estimated Cost|Duration|Best Time)',
            r'^\s*-\s*(–¶–µ–Ω–∞ —Ç—É—Ä–∞|–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç|–ñ–∏–ª—å–µ|–õ—É—á—à–µ–µ –≤—Ä–µ–º—è)',
            r'^\s*\*\s*',
            r'^\s*‚Ä¢\s*–ú–∞—Ä—à—Ä—É—Ç —Ç—É—Ä–∞:',
        ]

        for line in lines:
            line = line.strip()
            if not line:
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
            if any(re.match(pattern, line, re.IGNORECASE) for pattern in skip_patterns):
                continue

            # –£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏
            if '### ' in line and line.count(':') > 1:
                continue

            # –û—á–∏—â–∞–µ–º markdown
            clean_line = re.sub(r'[#*_`]', '', line)
            clean_line = re.sub(r'\s+', ' ', clean_line).strip()

            if clean_line and len(clean_line) > 10:
                clean_lines.append(clean_line)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        main_description = ' '.join(clean_lines[:5]) if clean_lines else description[:500]

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç)
        if len(main_description) > 800:
            main_description = main_description[:800] + "..."

        return main_description

    def _clean_practical_info(self, practical_info: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""

        # –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∫–∏
        clean = re.sub(r'####?\s*', '', practical_info)
        clean = re.sub(r'[#*_`]', '', clean)

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ
        sentences = [s.strip() for s in clean.split('.') if s.strip()]
        important_sentences = []

        for sentence in sentences[:6]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 6 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            if len(sentence) > 20 and not sentence.startswith(('–ú–∞—Ä—à—Ä—É—Ç —Ç—É—Ä–∞', '–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç')):
                important_sentences.append(sentence)

        result = '. '.join(important_sentences)
        if result and not result.endswith('.'):
            result += '.'

        return result[:600] if result else ""

    def _clean_text(self, text: str) -> str:
        """–û–±—â–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""

        # –£–±–∏—Ä–∞–µ–º markdown –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
        clean = re.sub(r'[#*_`]', '', text)
        clean = re.sub(r'\s+', ' ', clean).strip()

        return clean


class TravelPlannerError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"""

    pass


class InvalidTravelRequestError(TravelPlannerError):
    """–û—à–∏–±–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""

    pass


class ExternalServiceError(TravelPlannerError):
    """–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""

    pass


class ConfigurationError(TravelPlannerError):
    """–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    pass
