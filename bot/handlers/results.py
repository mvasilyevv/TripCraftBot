"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""

import logging

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from bot.keyboards.inline import get_result_actions_keyboard, get_new_search_keyboard

logger = logging.getLogger(__name__)

router = Router()


async def show_travel_recommendation(
    callback: CallbackQuery, state: FSMContext
) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    logger.info("–ü–æ–∫–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    category = data.get("category", "family")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    answers = data.get("answers", {})

    # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É (–≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ use case)
    recommendation_text = _create_mock_recommendation(category, answers)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(
            recommendation_text,
            reply_markup=get_result_actions_keyboard(),
            parse_mode="Markdown"
        )


@router.callback_query(lambda c: c.data == "action:retry")
async def callback_retry_search(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç'"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–ø—Ä–æ—Å–∏–ª –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    category = data.get("category", "family")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    answers = data.get("answers", {})

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(
            "üîÑ –ò—â—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )

    # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä—É–≥—É—é –∑–∞–≥–ª—É—à–∫—É
    alternative_recommendation = _create_mock_alternative_recommendation(
        category, answers
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(
            alternative_recommendation,
            reply_markup=get_result_actions_keyboard(),
            parse_mode="Markdown"
        )

    await callback.answer("–ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")


@router.callback_query(lambda c: c.data == "action:share")
async def callback_share_result(callback: CallbackQuery, _: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —Ö–æ—á–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    current_text = ""
    if (callback.message and
        isinstance(callback.message, Message) and
        callback.message.text):
        current_text = callback.message.text
    elif (callback.message and
          isinstance(callback.message, Message) and
          callback.message.caption):
        current_text = callback.message.caption

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ –∫–æ–Ω–µ—Ü
    share_text = f"{current_text}\n\nü§ñ –ù–∞–π–¥–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é @TraveleBot"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    if callback.message and isinstance(callback.message, Message):
        await callback.message.answer(
            share_text,
            reply_markup=get_new_search_keyboard(),
            parse_mode="Markdown"
        )

    await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏!")


def _create_mock_recommendation(category: str, _: dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–≤–µ—Ç–æ–≤"""

    # –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    mock_recommendations = {
        "family": {
            "destination": "–ê–Ω—Ç–∞–ª—å—è, –¢—É—Ä—Ü–∏—è",
            "description": "–ò–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ —Å –¥–µ—Ç—å–º–∏",
            "highlights": [
                "–ê–∫–≤–∞–ø–∞—Ä–∫–∏ –∏ –¥–µ—Ç—Å–∫–∏–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
                "–ß–∏—Å—Ç—ã–µ –ø–ª—è–∂–∏ —Å –ø–æ–ª–æ–≥–∏–º –≤—Ö–æ–¥–æ–º",
                "–û—Ç–µ–ª–∏ —Å –¥–µ—Ç—Å–∫–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π"
            ],
            "practical_info": "–í–∏–∑–∞ –Ω–µ –Ω—É–∂–Ω–∞, –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –∏–∑ –ú–æ—Å–∫–≤—ã 3.5 —á–∞—Å–∞",
            "cost": "$800-1200 –Ω–∞ —Å–µ–º—å—é",
            "duration": "7-10 –¥–Ω–µ–π"
        },
        "pets": {
            "destination": "–°–æ—á–∏, –†–æ—Å—Å–∏—è",
            "description": (
                "Pet-friendly –∫—É—Ä–æ—Ä—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –æ—Ç–µ–ª–µ–π, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö"
            ),
            "highlights": [
                "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–ª—è–∂–∏ –¥–ª—è —Å–æ–±–∞–∫",
                "–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ –∫–ª–∏–Ω–∏–∫–∏",
                "–ü–∞—Ä–∫–∏ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫ —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏"
            ],
            "practical_info": "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –∂–∏–≤–æ—Ç–Ω–æ–µ, –ø–µ—Ä–µ–Ω–æ—Å–∫–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞",
            "cost": "$400-600",
            "duration": "5-7 –¥–Ω–µ–π"
        },
        "photo": {
            "destination": "–ö–∞–ø–ø–∞–¥–æ–∫–∏—è, –¢—É—Ä—Ü–∏—è",
            "description": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–µ–π–∑–∞–∂–∏ –¥–ª—è –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
            "highlights": [
                "–ü–æ–ª–µ—Ç—ã –Ω–∞ –≤–æ–∑–¥—É—à–Ω—ã—Ö —à–∞—Ä–∞—Ö",
                "–ü–æ–¥–∑–µ–º–Ω—ã–µ –≥–æ—Ä–æ–¥–∞",
                "–°–∫–∞–∑–æ—á–Ω—ã–µ –¥—ã–º–æ—Ö–æ–¥—ã"
            ],
            "practical_info": "–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: –∞–ø—Ä–µ–ª—å-–º–∞–π, —Å–µ–Ω—Ç—è–±—Ä—å-–æ–∫—Ç—è–±—Ä—å",
            "cost": "$600-900",
            "duration": "4-5 –¥–Ω–µ–π"
        },
        "budget": {
            "destination": "–ì—Ä—É–∑–∏—è (–¢–±–∏–ª–∏—Å–∏ + –ë–∞—Ç—É–º–∏)",
            "description": "–ú–∞–∫—Å–∏–º—É–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π –ø—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º –±—é–¥–∂–µ—Ç–µ",
            "highlights": [
                "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –ø–æ —Å—Ç–∞—Ä–æ–º—É –≥–æ—Ä–æ–¥—É",
                "–ù–µ–¥–æ—Ä–æ–≥–∞—è –∏ –≤–∫—É—Å–Ω–∞—è –µ–¥–∞",
                "–î–æ—Å—Ç—É–ø–Ω–æ–µ –∂–∏–ª—å–µ"
            ],
            "practical_info": "–í–∏–∑–∞ –Ω–µ –Ω—É–∂–Ω–∞, –º–æ–∂–Ω–æ –¥–æ–±—Ä–∞—Ç—å—Å—è –∞–≤—Ç–æ–±—É—Å–æ–º",
            "cost": "$200-400",
            "duration": "5-7 –¥–Ω–µ–π"
        },
        "active": {
            "destination": "–ö—Ä–∞—Å–Ω–∞—è –ü–æ–ª—è–Ω–∞, –°–æ—á–∏",
            "description": "–ì–æ—Ä–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö",
            "highlights": [
                "–¢—Ä–µ–∫–∫–∏–Ω–≥ –≤ –≥–æ—Ä–∞—Ö",
                "–ö–∞–Ω–∞—Ç–Ω—ã–µ –¥–æ—Ä–æ–≥–∏",
                "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞"
            ],
            "practical_info": "–°–µ–∑–æ–Ω: –º–∞–π-–æ–∫—Ç—è–±—Ä—å, –Ω—É–∂–Ω–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω–∞—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞",
            "cost": "$500-800",
            "duration": "4-6 –¥–Ω–µ–π"
        }
    }

    rec = mock_recommendations.get(category, mock_recommendations["family"])

    text = f"üåç **{rec['destination']}**\n\n"
    text += f"{rec['description']}\n\n"
    text += "‚ú® **–û—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:**\n"
    for highlight in rec['highlights']:
        text += f"‚Ä¢ {highlight}\n"
    text += f"\nüìã **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n{rec['practical_info']}\n\n"
    text += f"üí∞ **–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {rec['cost']}\n"
    text += f"‚è± **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {rec['duration']}"

    return text


def _create_mock_alternative_recommendation(category: str, _: dict) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é –∑–∞–≥–ª—É—à–∫—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""

    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    alternative_recommendations = {
        "family": "–ö–∏–ø—Ä (–ê–π—è-–ù–∞–ø–∞)",
        "pets": "–ö—Ä—ã–º (–Ø–ª—Ç–∞)",
        "photo": "–ò—Å–ª–∞–Ω–¥–∏—è (–†–µ–π–∫—å—è–≤–∏–∫)",
        "budget": "–ë–µ–ª–∞—Ä—É—Å—å (–ú–∏–Ω—Å–∫)",
        "active": "–ê–ª—Ç–∞–π (–ë–µ–ª–æ–∫—É—Ä–∏—Ö–∞)"
    }

    destination = alternative_recommendations.get(
        category, "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"
    )

    text = f"üåç **{destination}**\n\n"
    text += "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–æ–π—Ç–∏!\n\n"
    text += "‚ú® **–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å:**\n"
    text += "‚Ä¢ –î—Ä—É–≥–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –∫—É–ª—å—Ç—É—Ä–∞\n"
    text += "‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n"
    text += "‚Ä¢ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞-–∫–∞—á–µ—Å—Ç–≤–æ\n\n"
    text += "üìã **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É\n\n"
    text += "üí∞ **–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** –£—Ç–æ—á–Ω—è–µ—Ç—Å—è\n"
    text += "‚è± **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 5-7 –¥–Ω–µ–π"

    return text
