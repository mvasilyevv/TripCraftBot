"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""

import logging

from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from bot.domain.models import ExternalServiceError, InvalidTravelRequestError
from bot.infrastructure.service_factory import get_service_factory
from bot.keyboards.inline import get_new_search_keyboard, get_result_actions_keyboard

logger = logging.getLogger(__name__)

router = Router()


async def show_travel_recommendation(callback: CallbackQuery, _: FSMContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    logger.info("–ü–æ–∫–∞–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d", callback.from_user.id)

    if not callback.from_user:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ callback")
        return

    user_id = callback.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º use case –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        service_factory = get_service_factory()
        recommendation_use_case = service_factory.get_travel_recommendation_use_case()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        recommendation = await recommendation_use_case.execute(user_id)

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è Telegram
        recommendation_text = recommendation.format_for_telegram()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        if callback.message and isinstance(callback.message, Message):
            await callback.message.edit_text(
                recommendation_text,
                reply_markup=get_result_actions_keyboard(),
                parse_mode="Markdown",
            )

    except InvalidTravelRequestError:
        logger.error("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–µ –Ω–∞–π–¥–µ–Ω", user_id)
        error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫."
        if callback.message and isinstance(callback.message, Message):
            await callback.message.edit_text(error_text, reply_markup=get_new_search_keyboard())

    except ExternalServiceError as e:
        logger.error("–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", user_id, str(e))

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        try:
            service_factory = get_service_factory()
            recommendation_service = service_factory.get_recommendation_service()
            state_repository = service_factory.get_state_repository()

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è fallback
            request = await state_repository.get_travel_request(user_id)
            if request:
                fallback_recommendation = recommendation_service.get_fallback_recommendation(
                    request
                )
                recommendation_text = fallback_recommendation.format_for_telegram()
                recommendation_text += "\n\n‚ö†Ô∏è *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ*"

                if callback.message and isinstance(callback.message, Message):
                    await callback.message.edit_text(
                        recommendation_text,
                        reply_markup=get_result_actions_keyboard(),
                        parse_mode="Markdown",
                    )
                return
        except Exception as fallback_error:
            logger.error("–û—à–∏–±–∫–∞ fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: %s", str(fallback_error))

        # –ï—Å–ª–∏ fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        error_text = (
            "‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        if callback.message and isinstance(callback.message, Message):
            await callback.message.edit_text(error_text, reply_markup=get_new_search_keyboard())

    except Exception as e:
        logger.error(
            "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", user_id, str(e)
        )
        error_text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫."
        )
        if callback.message and isinstance(callback.message, Message):
            await callback.message.edit_text(error_text, reply_markup=get_new_search_keyboard())


@router.callback_query(lambda c: c.data == "action:retry")
async def callback_retry_search(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç'"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–ø—Ä–æ—Å–∏–ª –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback.from_user.id)

    if not callback.from_user:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ callback")
        return

    user_id = callback.from_user.id

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    if callback.message and isinstance(callback.message, Message):
        await callback.message.edit_text(
            "üîÑ –ò—â—É –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )

    try:
        # –ü–æ–ª—É—á–∞–µ–º use case –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        service_factory = get_service_factory()
        alternative_use_case = service_factory.get_alternative_recommendation_use_case()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        data = await state.get_data()
        exclude_destinations = data.get("previous_destinations", [])

        # –ü–æ–ª—É—á–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        recommendation = await alternative_use_case.execute(user_id, exclude_destinations)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if "previous_destinations" not in data:
            data["previous_destinations"] = []
        data["previous_destinations"].append(recommendation.destination)
        await state.update_data(previous_destinations=data["previous_destinations"])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è Telegram
        recommendation_text = recommendation.format_for_telegram()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        if callback.message and isinstance(callback.message, Message):
            await callback.message.edit_text(
                recommendation_text,
                reply_markup=get_result_actions_keyboard(),
                parse_mode="Markdown",
            )

        await callback.answer("–ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")

    except InvalidTravelRequestError:
        logger.error("–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã", user_id)
        error_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫."
        if callback.message and isinstance(callback.message, Message):
            await callback.message.edit_text(error_text, reply_markup=get_new_search_keyboard())

    except ExternalServiceError as e:
        logger.error(
            "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", user_id, str(e)
        )

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å fallback —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        try:
            service_factory = get_service_factory()
            recommendation_service = service_factory.get_recommendation_service()
            state_repository = service_factory.get_state_repository()

            request = await state_repository.get_travel_request(user_id)
            if request:
                fallback_recommendation = recommendation_service.get_fallback_recommendation(
                    request
                )
                recommendation_text = fallback_recommendation.format_for_telegram()
                recommendation_text += "\n\n‚ö†Ô∏è *–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ*"

                if callback.message and isinstance(callback.message, Message):
                    await callback.message.edit_text(
                        recommendation_text,
                        reply_markup=get_result_actions_keyboard(),
                        parse_mode="Markdown",
                    )
                await callback.answer("–ù–∞–π–¥–µ–Ω –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç!")
                return
        except Exception as fallback_error:
            logger.error("–û—à–∏–±–∫–∞ fallback –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: %s", str(fallback_error))

        error_text = (
            "‚ùå –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∏—Å–∫–æ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        if callback.message and isinstance(callback.message, Message):
            await callback.message.edit_text(error_text, reply_markup=get_new_search_keyboard())

    except Exception as e:
        logger.error(
            "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %s", user_id, str(e)
        )
        error_text = (
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫."
        )
        if callback.message and isinstance(callback.message, Message):
            await callback.message.edit_text(error_text, reply_markup=get_new_search_keyboard())


@router.callback_query(lambda c: c.data == "action:share")
async def callback_share_result(callback: CallbackQuery, _: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è'"""
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —Ö–æ—á–µ—Ç –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º", callback.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    current_text = ""
    if callback.message and isinstance(callback.message, Message) and callback.message.text:
        current_text = callback.message.text
    elif callback.message and isinstance(callback.message, Message) and callback.message.caption:
        current_text = callback.message.caption

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ –∫–æ–Ω–µ—Ü
    share_text = f"{current_text}\n\nü§ñ –ù–∞–π–¥–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é @TripCraftBot"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    if callback.message and isinstance(callback.message, Message):
        await callback.message.answer(
            share_text, reply_markup=get_new_search_keyboard(), parse_mode="Markdown"
        )

    await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏!")
